syntax = "proto3";

package com.newbig.im.core.protocol;

option java_package = "com.newbig.im.core.proto";
option java_outer_classname = "ImNettyProtocol";
option java_multiple_files = true;

// niosocket 请求体
message SocketASK {
    // 重定向的域 >= 0 会认为是业务请求，< 0 认为是系统请求
    int32 forward = 1;
    RequestBody body = 3;
}

message RequestBody {
    // 接口操作码
    uint32 opcode = 1;
    // 接口版本
    uint32 vercode = 2;
    // 参数 约定结构  ，json，pb等等， 数组前面可以放公共参数 如 userId, JSON, PB
    repeated bytes args = 3;
}

// niosocket 消息
message SocketMessage {
    // 错误码 参考 SERVER_CODE
    SERVER_CODE code = 1;
    // 服务端预定义 消息的域
    uint32 domain = 2;
    // 操作码  code = 1 , opCode 与 请求的 request opcode 保持一致，code = 1 则会新定义操作码
    uint32 opcode = 3;
    MessageBody body = 4;
}

message MessageBody {
    // 错误码，默认为 0 表示返回消息无错误提示
    uint32 error = 1;
    // 消息内容 约定字节，如 json , pb
    bytes message = 2;
}

// 系统错误码
enum SERVER_CODE {
    // 成功响应
    RESONSE_CODE = 0;
    // 通知
    NOTIFY_CODE = 1;
    // 服务端内部错误
    SERVER_ERROR = 2;
    // 需要登陆才能访问
    UNAUTHORIZED = 3;
    // 心跳响应
    HEARTBEAT_CODE = 4;
}

enum SYSTEM_FORWARD_CODE {
    // 消息边界
    BOUNDARY = 0;
    // 系统请求
    SYSTEM = -1;
    // 心跳请求
    HEARTBEAT = -2;
}

enum SYSTEM_OPCODE {
    // 登录操作
    LOGIN_CODE = 0;
}

enum SYSTEM_ERROR {
    // 登录失败
    LOGIN_FAILED = 0;
    // 登录成功
    LOGIN_SUCCESS = 1;
}